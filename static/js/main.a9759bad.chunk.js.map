{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","onChange","name","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodo","console","log","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9759bad.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef } from 'react'\n\nconst TodoForm = (props) => {\n\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n    const inputRef = useRef();\n\n    useEffect(() => {\n        inputRef.current.focus();\n    });\n\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        props.onSubmit({\n            id: Math.floor(Math.random() * 10000),\n            text: input\n        });\n\n        setInput('');\n    }\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    }\n\n    return (\n            <form className=\"todo-form\" onSubmit={handleSubmit}>\n                {props.edit ? (\n                    <>\n                        <input  \n                            type=\"text\"\n                            value={input}\n                            placeholder=\"Add to Do\"\n                            onChange={handleChange}\n                            name='text'\n                            className=\"todo-input edit\"\n                            ref={inputRef}\n                        />\n                        <button type=\"submit\" className=\"todo-button edit\">Update</button>\n                    </>\n                ): (\n                    <>\n                        <input  \n                            type=\"text\"\n                            value={input}\n                            placeholder=\"Add to Do\"\n                            onChange={handleChange}\n                            name='text'\n                            className=\"todo-input\"\n                            ref={inputRef}\n                        />\n                        <button type=\"submit\" className=\"todo-button\">Add todo</button>\n                    </>\n                    \n                )}\n                \n            </form>\n    )\n}\n\nexport default TodoForm;\n","import React, {useState} from 'react';\nimport  { RiCloseCircleLine } from 'react-icons/ri';\nimport {TiEdit} from 'react-icons/ti';\nimport TodoForm from './TodoForm';\n\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\n\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id:null,\n            value: ''\n        })\n    }\n\n    if(edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div \n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n            key={index}\n        >\n            <div key={todo.id} className=\"todo-text\" onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine \n                    onClick={() => removeTodo(todo.id)} \n                    className=\"delete-icon\"\n                />\n                \n                <TiEdit \n                    onClick={() => setEdit({id:todo.id,value: todo.text}) } \n                    className=\"edit-icon\"\n                />\n            </div>\n\n        </div>\n    ));\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport Todo from './Todo';\nimport TodoForm from './TodoForm';\n\nconst TodoList = () => {\n\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodo = [todo, ...todos];\n\n        setTodos(newTodo);\n        console.log(...todos);\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo=> todo.id !==id);\n        setTodos(removeArr);\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id === id ) {\n                todo.isComplete = !todo.isComplete;\n            }\n            return todo;\n        });\n        setTodos(updatedTodos);\n    }\n\n    return (\n        <>\n            <h1>What's The Plan For Today?</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo todos={todos} completeTodo={completeTodo}  removeTodo={removeTodo} updateTodo={updateTodo} />\n        </>\n    )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}